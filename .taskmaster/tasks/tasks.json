{
  "master": {
    "tasks": [
      {
        "id": 26,
        "title": "Establish Flake Structure and System Builders",
        "description": "Create the foundational Nix flake structure with system builders for both NixOS and Darwin platforms",
        "details": "1. Create a `flake.nix` file at the root of the repository that defines inputs (nixpkgs, home-manager, darwin, etc.)\n2. Implement `lib/mkSystem.nix` with functions to build configurations for both NixOS and Darwin\n3. Set up a basic directory structure:\n   - hosts/: For host-specific configurations\n   - hosts/_modules/: For shared modules (common, nixos, darwin)\n   - home/: For Home Manager configurations\n   - overlays/: For package modifications\n   - pkgs/: For custom packages\n4. Create a simple argument passing system for dependency injection between modules\n5. Implement basic validation to catch configuration errors\n6. Ensure the flake builds successfully with `nix flake check`",
        "testStrategy": "1. Verify flake evaluation with `nix flake check`\n2. Test building a minimal NixOS configuration\n3. Test building a minimal Darwin configuration\n4. Validate directory structure follows the planned architecture\n5. Ensure proper error messages are displayed for common configuration mistakes",
        "priority": "high",
        "dependencies": [],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 27,
        "title": "Implement Modular Configuration System",
        "description": "Create a layered module system with clear separation of concerns between common, platform-specific, and host-specific configurations",
        "details": "1. Design a module structure with three layers:\n   - Common modules (shared across all systems)\n   - Platform-specific modules (NixOS vs Darwin)\n   - Host-specific configurations\n2. Create standard module interfaces with options and config attributes\n3. Implement module composition logic in `lib/mkSystem.nix`\n4. Set up inheritance patterns for configuration values\n5. Create helper functions for common configuration patterns\n6. Implement conditional module loading based on system type\n7. Document the module system architecture and usage patterns",
        "testStrategy": "1. Create test modules for each layer and verify proper inheritance\n2. Test platform-specific module loading on different system types\n3. Verify that common configurations are properly applied across platforms\n4. Test module composition with conflicting configurations to ensure proper resolution\n5. Validate that helper functions produce expected configuration outputs",
        "priority": "high",
        "dependencies": [
          26
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 28,
        "title": "Set Up SOPS-based Secrets Management",
        "description": "Implement secure secrets management using SOPS with age keys for encrypted configuration across hosts",
        "details": "1. Set up SOPS integration with the Nix flake\n2. Generate age keys for each host and store public keys in the repository\n3. Create a `.sops.yaml` configuration file defining access policies\n4. Implement a secrets directory structure under `hosts/<hostname>/secrets/`\n5. Create templates for common secret types (credentials, certificates, etc.)\n6. Write helper functions for secret deployment and usage\n7. Document secret rotation and management procedures\n8. Implement integration with the module system for automatic secret deployment",
        "testStrategy": "1. Test encryption and decryption of sample secrets\n2. Verify that secrets are only accessible by the intended hosts\n3. Test secret rotation procedure on a non-critical system\n4. Validate that secrets are properly deployed to the correct locations\n5. Ensure secrets are not exposed in the Nix store or logs",
        "priority": "high",
        "dependencies": [
          26,
          27
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 29,
        "title": "Configure Home Manager Integration",
        "description": "Set up Home Manager for consistent user environments across all platforms with shared configurations",
        "details": "1. Create a base Home Manager configuration in `home/default.nix`\n2. Implement platform-specific Home Manager modules (Darwin vs NixOS)\n3. Set up user profiles with shared development tools and configurations\n4. Configure shell environments (zsh, bash) with consistent aliases and functions\n5. Set up dotfiles management through Home Manager\n6. Implement editor configurations (VSCode, Neovim) with consistent theming\n7. Create language-specific development environments (Python, Node.js, Go)\n8. Integrate Home Manager with the system builders in `lib/mkSystem.nix`",
        "testStrategy": "1. Test Home Manager configuration on both NixOS and Darwin platforms\n2. Verify that user environments are consistent across different hosts\n3. Test shell configuration and aliases on different platforms\n4. Validate that editor configurations are properly applied\n5. Test language-specific development environments with sample projects",
        "priority": "medium",
        "dependencies": [
          26,
          27
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 30,
        "title": "Implement Core Infrastructure Services",
        "description": "Configure essential home lab services including DNS, reverse proxy, and container orchestration",
        "status": "done",
        "dependencies": [
          26,
          27,
          28
        ],
        "priority": "medium",
        "details": "1. Create NixOS modules for DNS services:\n   - AdGuard Home configuration\n   - Blocky for DNS filtering\n   - BIND for authoritative DNS\n   - DNSdist for load balancing\n2. Implement reverse proxy configurations:\n   - Caddy with automatic HTTPS\n   - HAProxy for load balancing\n   - Nginx for static content\n3. Set up Podman-based container orchestration:\n   - Network configuration\n   - Volume management\n   - Container definitions\n   - Enhanced podmanLib with mkHealthCheck helper and resource limit support\n   - Configurable UID/GID for all containerized services\n4. Configure basic monitoring with Glances and Node Exporter:\n   - Secure Glances configuration (localhost binding only)\n   - Reverse proxy integration with hostname-based routing\n   - Systemd hardening and resource limits\n   - Flexible configuration with extraArgs\n5. Implement network management for Unifi and Omada controllers:\n   - Unifi Controller with 1GB memory, 1 CPU limits\n   - Omada Controller with 512MB memory, 0.75 CPU limits\n6. Create service dependency management to ensure proper startup order\n7. Implement 1Password Connect with 128MB memory, 0.25 CPU limits",
        "testStrategy": "1. Test DNS resolution with each configured DNS service\n2. Verify reverse proxy configurations with test services\n3. Test container deployment and networking\n4. Validate monitoring data collection and security (especially for Glances)\n5. Test service dependencies during system startup\n6. Verify network management functionality\n7. Validate resource limits on containerized services\n8. Test UID/GID configuration for containers",
        "subtasks": [
          {
            "id": 1,
            "title": "Enhance podmanLib with resource management features",
            "description": "Implement mkHealthCheck helper and resource limit support in podmanLib",
            "status": "done",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Update Omada Controller with resource limits",
            "description": "Configure Omada Controller with 512MB memory, 0.75 CPU limits and configurable UID/GID",
            "status": "done",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "Update Unifi Controller with resource limits",
            "description": "Configure Unifi Controller with 1GB memory, 1 CPU limits and configurable UID/GID",
            "status": "done",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "Update 1Password Connect with resource limits",
            "description": "Configure 1Password Connect (both API and sync containers) with 128MB memory, 0.25 CPU limits",
            "status": "done",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "Implement configurable user/group ownership for containers",
            "description": "Make all containerized services have configurable user/group ownership instead of hardcoded 999",
            "status": "done",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 6,
            "title": "Improve Glances system monitoring security",
            "description": "Fix network exposure (bind to localhost only), add reverse proxy integration, remove insecure openFirewall option, add systemd hardening and resource limits, and make configuration flexible with extraArgs",
            "status": "done",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 7,
            "title": "Implement DNS services",
            "description": "Create NixOS modules for AdGuard Home, Blocky, BIND, and DNSdist",
            "status": "done",
            "dependencies": [],
            "details": "Successfully implemented all DNS services:\n- AdGuard Home for primary DNS filtering\n- Blocky as secondary DNS filtering option\n- BIND for authoritative DNS\n- DNSdist for load balancing",
            "testStrategy": "Verified DNS resolution with each configured service and confirmed proper functionality"
          },
          {
            "id": 8,
            "title": "Configure reverse proxy services",
            "description": "Implement Caddy, HAProxy, and Nginx configurations",
            "status": "done",
            "dependencies": [],
            "details": "Completed implementation of all reverse proxy services:\n- Caddy with automatic HTTPS for web services\n- HAProxy for load balancing\n- Nginx for static content\n- Configured hostname-based routing for all services",
            "testStrategy": "Tested all reverse proxy configurations with various services and verified proper routing and HTTPS functionality"
          },
          {
            "id": 9,
            "title": "Set up Node Exporter monitoring",
            "description": "Configure Node Exporter for system metrics collection",
            "status": "done",
            "dependencies": [],
            "details": "Implemented Node Exporter for system metrics collection with proper security hardening",
            "testStrategy": "Verified metrics collection and confirmed secure configuration"
          },
          {
            "id": 10,
            "title": "Implement service dependency management",
            "description": "Create proper startup order for all infrastructure services",
            "status": "done",
            "dependencies": [],
            "details": "Established proper service dependencies to ensure correct startup order for all infrastructure services",
            "testStrategy": "Tested system startup sequence and verified services start in the correct order"
          },
          {
            "id": 11,
            "title": "Configure Glances on luna with authentication",
            "description": "Enable Glances on luna host with proper authentication via SOPS secrets",
            "status": "done",
            "dependencies": [
              6
            ],
            "details": "Configured Glances on luna with authentication using SOPS for secure secret management",
            "testStrategy": "Verified authentication works properly and secrets are securely managed"
          },
          {
            "id": 12,
            "title": "Update nixpi with secure Glances configuration",
            "description": "Apply the improved secure Glances configuration to nixpi host",
            "status": "done",
            "dependencies": [
              6
            ],
            "details": "Updated nixpi to use the secure Glances configuration with all security improvements",
            "testStrategy": "Confirmed nixpi is using the secure configuration with proper localhost binding and reverse proxy integration"
          }
        ]
      },
      {
        "id": 31,
        "title": "Configure Development Environment Toolchain",
        "description": "Set up comprehensive development tools including language support, Kubernetes tools, and editor configurations",
        "details": "1. Configure language-specific development environments:\n   - Python with virtual environments and common packages\n   - Node.js with npm/yarn and development tools\n   - Go with proper GOPATH configuration\n2. Set up Kubernetes toolchain:\n   - kubectl with autocompletion\n   - Custom kubectl plugins for workflow enhancement\n   - Helm for package management\n   - k9s for cluster management\n3. Configure infrastructure-as-code tools:\n   - Terraform with provider configurations\n   - Ansible for configuration management\n4. Implement editor configurations:\n   - VSCode with extensions and settings\n   - Neovim with plugins and keybindings\n5. Set up consistent theming across all development tools",
        "testStrategy": "1. Test each language environment with sample projects\n2. Verify Kubernetes tools against a test cluster\n3. Test infrastructure-as-code tools with sample configurations\n4. Validate editor configurations and extensions\n5. Test consistent theming across different applications",
        "priority": "medium",
        "dependencies": [
          26,
          27,
          29
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 32,
        "title": "Create Host-Specific Configurations",
        "description": "Implement specific configurations for each target host (rymac, luna, rydev, nixos-bootstrap, nixpi)",
        "details": "1. Create host directories under `hosts/` for each target system:\n   - rymac (Darwin): Primary development machine\n   - luna (NixOS x86_64): Production infrastructure services\n   - rydev (NixOS aarch64): Development and testing\n   - nixos-bootstrap: Base system deployment\n   - nixpi: Raspberry Pi configuration\n2. Configure hardware-specific settings for each host\n3. Set up host-specific service configurations\n4. Implement Disko for declarative disk management on NixOS hosts\n5. Create host-specific network configurations\n6. Set up boot configurations appropriate for each platform\n7. Configure host-specific user accounts and permissions",
        "testStrategy": "1. Test building configurations for each host\n2. Verify hardware-specific settings are correctly applied\n3. Test service configurations on appropriate hosts\n4. Validate disk configurations with Disko\n5. Test network configurations for connectivity\n6. Verify boot configurations with test boots where possible",
        "priority": "medium",
        "dependencies": [
          26,
          27,
          28,
          29,
          30
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 33,
        "title": "Set Up Attic Binary Cache for Improved Build Performance",
        "description": "Deploy a self-hosted Attic binary cache server on luna with secure configuration and integrate with all client machines to achieve approximately 10x faster rebuilds.",
        "details": "1. Install and configure Attic server on luna:\n   - Set up the Attic service using the NixOS module\n   - Configure storage backend with appropriate retention policies\n   - Set up authentication and access control mechanisms\n   - Implement TLS with proper certificates (possibly using ACME)\n   - Configure backup strategy for cache data\n\n2. Create cache management infrastructure:\n   - Set up cache signing keys with proper permissions\n   - Configure cache pruning policies to manage disk usage\n   - Implement monitoring for cache size and performance\n   - Create maintenance scripts for cache optimization\n\n3. Configure client-side integration:\n   - Add Attic cache to substituters in Nix configuration\n   - Configure trusted public keys for all clients\n   - Set up appropriate bandwidth and connection limits\n   - Implement fallback to official cache for missing packages\n\n4. Implement automated cache population:\n   - Configure CI/CD pipeline to push built derivations to the cache\n   - Set up post-build hooks to automatically push local builds\n   - Create policies for which derivations should be cached\n\n5. Optimize cache performance:\n   - Configure appropriate compression settings\n   - Tune network parameters for optimal throughput\n   - Implement request rate limiting to prevent overload\n   - Set up caching headers for improved performance\n\n6. Document cache usage and maintenance:\n   - Create documentation for adding new clients\n   - Document troubleshooting procedures\n   - Create guidelines for cache maintenance and monitoring\n   - Document backup and recovery procedures",
        "testStrategy": "1. Verify Attic server deployment:\n   - Confirm service is running and accessible from the network\n   - Test authentication mechanisms\n   - Validate TLS configuration with SSL testing tools\n   - Verify storage backend is properly configured\n\n2. Test cache functionality:\n   - Push test derivations to the cache\n   - Verify derivations can be retrieved from other hosts\n   - Test cache signing and verification\n   - Measure cache hit rates and performance improvements\n\n3. Benchmark performance improvements:\n   - Measure build times before and after cache implementation\n   - Compare performance across different host types\n   - Test concurrent access from multiple clients\n   - Verify bandwidth usage is within expected parameters\n\n4. Validate security configuration:\n   - Ensure only authorized clients can push to the cache\n   - Verify that only properly signed packages are accepted\n   - Test access control mechanisms\n   - Validate that sensitive information is not exposed\n\n5. Test failure scenarios:\n   - Simulate network outages and verify graceful fallback\n   - Test cache server restart procedures\n   - Verify behavior when cache storage is near capacity\n   - Test backup and recovery procedures",
        "status": "pending",
        "dependencies": [
          27,
          28,
          30,
          32
        ],
        "priority": "high",
        "subtasks": []
      },
      {
        "id": 34,
        "title": "Implement Backup and Restore Strategy for Stateful NixOS Services",
        "description": "Research and implement comprehensive backup and restore mechanisms for critical NixOS services that maintain state outside the Nix store, with special focus on services using mutableSettings=true like AdGuard Home.",
        "details": "1. Research and document state management patterns in NixOS:\n   - Identify services using mutableSettings=true in the current configuration\n   - Map all critical stateful data locations across deployed services\n   - Document the persistence mechanisms used by each service\n\n2. Design a layered backup strategy:\n   - Create a central backup module in the NixOS configuration\n   - Implement service-specific backup hooks for each stateful service\n   - Configure automated, scheduled backups with retention policies\n   - Set up secure remote storage for backups (possibly using SOPS for credentials)\n\n3. Implement AdGuard Home backup solution:\n   - Create a backup script that preserves AdGuard configuration and statistics\n   - Ensure backup captures both /var/lib/AdGuardHome and runtime configuration\n   - Test backup during service updates to verify completeness\n\n4. Develop restore procedures:\n   - Create documented restore workflows for each service\n   - Implement restore scripts with appropriate permission handling\n   - Test restore procedures in isolation to verify effectiveness\n\n5. Integrate with existing infrastructure:\n   - Configure backup monitoring and alerting\n   - Add backup status to system health checks\n   - Document backup locations and retention policies\n\n6. Implement backup rotation and pruning:\n   - Configure retention policies (daily, weekly, monthly)\n   - Implement secure cleanup of expired backups\n   - Monitor backup storage usage\n\n7. Create disaster recovery documentation:\n   - Step-by-step recovery procedures for each critical service\n   - Required credentials and access methods\n   - Verification steps for successful restoration",
        "testStrategy": "1. Test backup creation:\n   - Verify automated backup execution on schedule\n   - Validate backup content contains all critical configuration\n   - Check backup integrity and completeness\n   - Confirm proper permissions on backup files\n\n2. Test restore procedures:\n   - Perform test restores in isolated environments\n   - Verify service functionality after restore\n   - Measure restore time and document in disaster recovery plan\n   - Test restoration to different host to verify portability\n\n3. Validate AdGuard Home specific backup/restore:\n   - Backup AdGuard Home with active configuration\n   - Modify settings and verify they're captured in subsequent backups\n   - Restore to a previous configuration and verify settings are properly applied\n   - Test migration between AdGuard Home versions\n\n4. Test backup rotation:\n   - Verify old backups are properly pruned according to retention policy\n   - Confirm backup storage doesn't exceed allocated space\n   - Test recovery using backups of different ages\n\n5. Perform disaster recovery simulation:\n   - Simulate complete system failure\n   - Follow documented recovery procedures\n   - Measure time to restore full functionality\n   - Document any gaps or improvements needed",
        "status": "pending",
        "dependencies": [
          27,
          28,
          30,
          32
        ],
        "priority": "high",
        "subtasks": []
      }
    ],
    "metadata": {
      "created": "2025-09-30T13:53:55.465Z",
      "updated": "2025-10-02T16:23:18.509Z",
      "description": "Tasks for master context"
    }
  }
}

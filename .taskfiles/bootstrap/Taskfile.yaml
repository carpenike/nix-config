---
version: "3"

tasks:
  extract-ssh-key:
    desc: Extract SSH host key from target and convert to age format
    silent: true
    summary: |
      Extracts the SSH ed25519 host public key from a target host and converts it to age format.
      This age key can then be added to .sops.yaml for secrets encryption.

      Args:
        host: Target hostname (required)
        ssh_user: SSH user (default: ryan)
        NIXOS_DOMAIN: Domain suffix (default: holthome.netinternal)
        method: Extraction method - 'ssh' or 'scan' (default: ssh)

      Examples:
        task bootstrap:extract-ssh-key host=forge
        task bootstrap:extract-ssh-key host=luna method=scan
        task bootstrap:extract-ssh-key host=newhost ssh_user=ryan NIXOS_DOMAIN=holthome.net
    vars:
      ssh_user: '{{.ssh_user | default "ryan"}}'
      NIXOS_DOMAIN: '{{.NIXOS_DOMAIN | default "holthome.net"}}'
      method: '{{.method | default "ssh"}}'
      fqdn:
        sh: 'echo "{{.host}}.{{.NIXOS_DOMAIN}}"'
    requires:
      vars:
        - host
    cmds:
      - |
        set -euo pipefail

        echo "üì° Extracting SSH host key from {{.fqdn}}..." >&2

        case "{{.method}}" in
          ssh)
            echo "  Method: Direct SSH read" >&2
            # Capture stderr separately to filter out SSH warnings
            if ! output=$(ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null \
              -o ConnectTimeout=10 -o BatchMode=yes -o LogLevel=ERROR \
              "{{.ssh_user}}@{{.fqdn}}" \
              'if [ -f /etc/ssh/ssh_host_ed25519_key.pub ]; then
                cat /etc/ssh/ssh_host_ed25519_key.pub
              elif [ -f /persist/etc/ssh/ssh_host_ed25519_key.pub ]; then
                cat /persist/etc/ssh/ssh_host_ed25519_key.pub
              else
                echo "ERROR: No SSH host key found" >&2
                exit 1
              fi' 2>&1); then
              echo "‚ùå SSH connection failed to {{.ssh_user}}@{{.fqdn}}" >&2
              echo "   Error: $output" >&2
              echo "" >&2
              echo "üí° Troubleshooting tips:" >&2
              echo "   - Is the system fully booted? (wait 2-3 minutes after reboot)" >&2
              echo "   - Try the scan method: task bootstrap:extract-ssh-key host={{.host}} method=scan" >&2
              echo "   - For LiveCD, use: task bootstrap:extract-ssh-key host={{.host}} ssh_user=nixos" >&2
              exit 1
            fi
            # Filter out only the SSH public key line (starts with ssh-)
            pub=$(echo "$output" | grep '^ssh-' | head -n1)
            if [ -z "$pub" ]; then
              echo "‚ùå Failed to extract SSH public key from output" >&2
              echo "   Output was: $output" >&2
              exit 1
            fi
            ;;
          scan)
            echo "  Method: SSH keyscan" >&2
            pub=$(ssh-keyscan -t ed25519 "{{.fqdn}}" 2>/dev/null | grep -v '^#' | awk '{print $2" "$3}' | head -n1)
            ;;
          *)
            echo "‚ùå Invalid method '{{.method}}' (use 'ssh' or 'scan')" >&2
            exit 1
            ;;
        esac

        if [ -z "$pub" ]; then
          echo "‚ùå No ed25519 host key found on {{.fqdn}}" >&2
          echo "   Make sure the host is booted and SSH is accessible" >&2
          exit 1
        fi

        echo "  Found SSH key: ${pub:0:50}..." >&2
        echo "" >&2
        echo "üîë Converting to age format..." >&2

        # Try ssh-to-age from PATH first, then fall back to nix
        if command -v ssh-to-age >/dev/null 2>&1; then
          age_key=$(echo "$pub" | ssh-to-age)
        else
          echo "  Using nix shell for ssh-to-age..." >&2
          age_key=$(echo "$pub" | nix shell nixpkgs#ssh-to-age -c ssh-to-age)
        fi

        if [ -z "$age_key" ]; then
          echo "‚ùå Failed to convert SSH key to age format" >&2
          exit 1
        fi

        echo "" >&2
        echo "‚úÖ Age public key for {{.host}}:" >&2
        echo "" >&2
        echo "$age_key"
        echo "" >&2
        echo "üìù Next steps:" >&2
        echo "  1. Add this key to .sops.yaml under creation_rules[].age" >&2
        echo "  2. Run: task sops:re-encrypt" >&2
        echo "  3. Deploy full config: task nix:apply-nixos host={{.host}}" >&2
    preconditions:
      - sh: which ssh
        msg: "ssh not found"
      - sh: which nix
        msg: "nix not found"

  remote-install:
    desc: Remotely format disks and install NixOS bootstrap
    silent: true
    summary: |
      Performs complete remote NixOS installation including disk formatting.
      Requires LiveCD to be booted with SSH access (password set).

      Args:
        host: Target hostname (required)
        ssh_user: SSH user for LiveCD (default: nixos)
        NIXOS_DOMAIN: Domain suffix (default: holthome.net)

      Examples:
        task bootstrap:remote-install host=forge
        task bootstrap:remote-install host=luna ssh_user=nixos

      Prerequisites:
        - LiveCD booted on target system
        - SSH password set: sudo passwd nixos
        - Network connectivity established
    vars:
      ssh_user: '{{.ssh_user | default "nixos"}}'
      NIXOS_DOMAIN: '{{.NIXOS_DOMAIN | default "holthome.net"}}'
      fqdn:
        sh: 'echo "{{.host}}.{{.NIXOS_DOMAIN}}"'
    requires:
      vars:
        - host
    cmds:
      - |
        set -euo pipefail

        echo "üöÄ Remote NixOS installation starting for {{.fqdn}}" >&2
        echo "" >&2

        # Step 1: Set hostid and format disks
        echo "üì° Step 1/3: Setting hostid and formatting disks..." >&2
        ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null \
          "{{.ssh_user}}@{{.fqdn}}" \
          'set -euo pipefail
           echo "üîß Reading hostid from flake config..."
           hostid=$(nix eval --extra-experimental-features "nix-command flakes" --raw github:carpenike/nix-config#nixosConfigurations.{{.host}}.config.networking.hostId)
           echo "üìù Setting hostid to $hostid"
           if [ -f /etc/hostid ]; then
             echo "‚ö†Ô∏è  Hostid file exists, removing and recreating..."
             sudo rm -f /etc/hostid
           fi
           sudo zgenhostid "$hostid"
           echo "üíæ Formatting disks with disko..."
           sudo nix run --extra-experimental-features "nix-command flakes" \
             github:nix-community/disko -- --mode disko --flake github:carpenike/nix-config#{{.host}}'

        echo "‚úÖ Disk formatting completed" >&2
        echo "" >&2

        # Step 2: Install NixOS
        echo "üì° Step 2/3: Installing NixOS bootstrap..." >&2
        ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null \
          "{{.ssh_user}}@{{.fqdn}}" \
          'set -euo pipefail
           echo "üîß Installing NixOS bootstrap configuration..."
           sudo nixos-install --flake github:carpenike/nix-config#nixos-bootstrap --root /mnt --no-root-password'

        echo "‚úÖ NixOS installation completed" >&2
        echo "" >&2

        # Step 3: Reboot
        echo "üì° Step 3/3: Rebooting to installed system..." >&2
        echo "üîÑ Initiating reboot (connection will drop)..." >&2
        ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null \
          "{{.ssh_user}}@{{.fqdn}}" \
          'sudo reboot' || true

        echo "" >&2
        echo "‚úÖ Remote installation completed!" >&2
        echo "" >&2
        echo "üìù Next steps:" >&2
        echo "  1. Wait for system to reboot (~2-3 minutes)" >&2
        echo "  2. Extract SSH key: task bootstrap:extract-ssh-key host={{.host}}" >&2
        echo "  3. Add age key to .sops.yaml and re-encrypt: task sops:re-encrypt" >&2
        echo "  4. Deploy full config: task nix:apply-nixos host={{.host}}" >&2
        echo "" >&2
    preconditions:
      - sh: which ssh
        msg: "ssh not found"
      - sh: which nix
        msg: "nix not found"

  quickstart:
    desc: Show bootstrap quickstart guide
    silent: true
    cmds:
      - |
        echo "üöÄ NixOS Host Bootstrap - Quick Reference"
        echo ""
        echo "üìö Full documentation: docs/bootstrap-quickstart.md"
        echo ""
        echo "‚ö° Remote workflow (recommended - from your Mac):"
        echo "  1. Boot LiveCD on target, set password: sudo passwd nixos"
        echo "  2. Remote install: task bootstrap:remote-install host=HOSTNAME"
        echo "  3. Extract SSH key: task bootstrap:extract-ssh-key host=HOSTNAME"
        echo "  4. Add age key to .sops.yaml and re-encrypt: task sops:re-encrypt"
        echo "  5. Deploy full config: task nix:apply-nixos host=HOSTNAME"
        echo ""
        echo "‚öôÔ∏è  Manual workflow (if you prefer local install):"
        echo "  1. Boot LiveCD, set password: sudo passwd nixos"
        echo "  2. Set hostid and format:"
        echo "     hostid=\$(nix eval --raw github:carpenike/nix-config#nixosConfigurations.HOSTNAME.config.networking.hostId)"
        echo "     sudo zgenhostid \"\$hostid\""
        echo "     sudo nix run github:nix-community/disko -- --mode disko --flake github:carpenike/nix-config#HOSTNAME"
        echo "  3. Install: nixos-install --flake github:carpenike/nix-config#nixos-bootstrap --root /mnt --no-root-password"
        echo "  4. Reboot (system creates user 'ryan')"
        echo "  5. Extract SSH key: task bootstrap:extract-ssh-key host=HOSTNAME"
        echo "  6. Add age key to .sops.yaml and re-encrypt: task sops:re-encrypt"
        echo "  7. Deploy full config: task nix:apply-nixos host=HOSTNAME"
        echo ""
        echo "üÜï For NEW hosts (not in repo yet):"
        echo "  ‚Ä¢ Generate hostId first: head -c 8 /dev/urandom | od -An -tx1 | tr -d ' \n'"
        echo "  ‚Ä¢ Create host directory and update flake.nix BEFORE step 2"
        echo "  ‚Ä¢ See full docs for details"
        echo ""
        echo "üë§ Users:"
        echo "  ‚Ä¢ LiveCD: nixos (temporary, for remote disk setup)"
        echo "  ‚Ä¢ After install: ryan (created by nixos-bootstrap, has sudo)"
        echo ""
        echo "üìã Available tasks:"
        echo "  task bootstrap:extract-ssh-key host=HOSTNAME  - Extract SSH key remotely (uses ryan@host)"
        echo "  task bootstrap:quickstart                     - Show this help"
        echo ""

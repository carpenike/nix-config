{ lib, config, ... }:
let
  cfg = config.modules.services.dnsdist.shared;
in
{
  options.modules.services.dnsdist.shared = {
    enable = lib.mkEnableOption "the shared holthome.net DNSDist configuration";

    # Infrastructure settings
    bindPort = lib.mkOption {
      type = lib.types.port;
      default = 5391;
      description = "Port for local BIND server";
    };

    adguardPort = lib.mkOption {
      type = lib.types.port;
      default = 5390;
      description = "Port for local AdGuard server";
    };

    adguardCheckName = lib.mkOption {
      type = lib.types.str;
      default = "adguard.holthome.net";
      description = "Health check name for AdGuard";
    };

    # Cache configuration
    cacheSize = lib.mkOption {
      type = lib.types.int;
      default = 10000;
      description = "Packet cache size";
    };

    cacheMaxTTL = lib.mkOption {
      type = lib.types.int;
      default = 86400;
      description = "Maximum TTL for cache entries (seconds)";
    };

    cacheTemporaryFailureTTL = lib.mkOption {
      type = lib.types.int;
      default = 60;
      description = "TTL for temporary failure cache entries (seconds)";
    };

    # Local domains that should always go to BIND
    localDomains = lib.mkOption {
      type = lib.types.listOf lib.types.str;
      default = [ "unifi" "holthome.net" "10.in-addr.arpa" ];
      description = "Domains that should be routed to local BIND server";
    };

    # Network routing configuration
    networkRouting = lib.mkOption {
      type = lib.types.listOf (lib.types.submodule {
        options = {
          subnet = lib.mkOption {
            type = lib.types.strMatching "[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+/[0-9]+";
            description = "Subnet in CIDR notation";
          };
          pool = lib.mkOption {
            type = lib.types.enum [ "adguard" "cloudflare_general" "cloudflare_kids" "bind" ];
            description = "DNS pool to route this subnet to";
          };
          description = lib.mkOption {
            type = lib.types.str;
            description = "Description of this network segment";
          };
          dropAfter = lib.mkOption {
            type = lib.types.bool;
            default = false;
            description = "Whether to stop processing rules after this match";
          };
        };
      });
      default = [];
      description = "Network-based routing rules";
      example = lib.literalExpression ''
        [
          { subnet = "10.10.0.0/16"; pool = "adguard"; description = "lan"; }
          { subnet = "10.35.0.0/16"; pool = "cloudflare_general"; description = "guest vlan"; dropAfter = true; }
        ]
      '';
    };

    # Additional servers (like RV DNS for Luna)
    additionalServers = lib.mkOption {
      type = lib.types.listOf (lib.types.submodule {
        options = {
          address = lib.mkOption {
            type = lib.types.str;
            description = "Server address with port (e.g., 192.168.88.1:53)";
          };
          pool = lib.mkOption {
            type = lib.types.str;
            description = "Pool name for this server";
          };
          options = lib.mkOption {
            type = lib.types.lines;
            default = ''
              healthCheckMode = "lazy",
              checkInterval = 1800,
              maxCheckFailures = 3,
              lazyHealthCheckFailedInterval = 30,
              rise = 2,
              lazyHealthCheckThreshold = 30,
              lazyHealthCheckSampleSize = 100,
              lazyHealthCheckMinSampleCount = 10,
              lazyHealthCheckMode = 'TimeoutOnly',
              useClientSubnet = true
            '';
            description = "Additional server options";
          };
        };
      });
      default = [];
      description = "Additional DNS servers beyond the standard ones";
    };

    # Domain-specific routing
    domainRouting = lib.mkOption {
      type = lib.types.attrsOf lib.types.str;
      default = {};
      description = "Domain to pool routing rules";
      example = { "holtel.io" = "rv"; };
    };

    # Extra configuration
    extraConfig = lib.mkOption {
      type = lib.types.lines;
      default = "";
      description = "Additional DNSDist configuration";
    };
  };

  config = lib.mkIf cfg.enable {
    services.dnsdist.extraConfig = ''
      -- DNSDist shared configuration for holthome.net
      -- Generated by NixOS module

      -- Disable security status polling via DNS
      setSecurityPollSuffix("")

      -- Local BIND server
      newServer({
        address = "127.0.0.1:${toString cfg.bindPort}",
        pool = "bind",
        healthCheckMode="lazy",
        checkInterval=1,
        lazyHealthCheckFailedInterval=30,
        rise=2,
        maxCheckFailures=3,
        lazyHealthCheckThreshold=30,
        lazyHealthCheckSampleSize=100,
        lazyHealthCheckMinSampleCount=10,
        lazyHealthCheckMode='TimeoutOnly',
        useClientSubnet = true
      })

      -- Local AdGuard server
      newServer({
        address = "127.0.0.1:${toString cfg.adguardPort}",
        pool = "adguard",
        checkName = "${cfg.adguardCheckName}",
        healthCheckMode = "lazy",
        checkInterval = 1800,
        maxCheckFailures = 3,
        lazyHealthCheckFailedInterval = 30,
        rise = 2,
        lazyHealthCheckThreshold = 30,
        lazyHealthCheckSampleSize = 100,
        lazyHealthCheckMinSampleCount = 10,
        lazyHealthCheckMode = 'TimeoutOnly',
        useClientSubnet = true
      })

      -- AdGuard will be given requester IP
      setECSSourcePrefixV4(32)

      -- CloudFlare DNS over DoH - General
      newServer({
        address = "1.1.1.1:443",
        tls = "openssl",
        dohPath="/dns-query",
        subjectName = "cloudflare-dns.com",
        validateCertificates = true,
        checkInterval = 10,
        checkTimeout = 2000,
        pool = "cloudflare_general"
      })

      -- CloudFlare DNS over DoH - Kids Safe
      newServer({
        address = "1.1.1.3:443",
        tls = "openssl",
        dohPath="/dns-query",
        subjectName = "cloudflare-dns.com",
        validateCertificates = true,
        checkInterval = 10,
        checkTimeout = 2000,
        pool = "cloudflare_kids"
      })

      -- Additional servers (host-specific)
      ${lib.concatMapStringsSep "\n" (server: ''
        newServer({
          address = "${server.address}",
          pool = "${server.pool}",
          ${server.options}
        })
      '') cfg.additionalServers}

      -- Enable caching
      pc = newPacketCache(${toString cfg.cacheSize}, {
        maxTTL = ${toString cfg.cacheMaxTTL},
        minTTL = 0,
        temporaryFailureTTL = ${toString cfg.cacheTemporaryFailureTTL},
        staleTTL = 60,
        dontAge = false
      })
      getPool(""):setCache(pc)

      -- Allow DNS updates to go to BIND
      addAction(OpcodeRule(DNSOpcode.Update), PoolAction("bind"))

      -- Domain-specific routing (BEFORE network rules for proper precedence)
      -- Local domain routing (always to BIND)
      ${lib.concatMapStringsSep "\n" (domain: ''
        addAction('${domain}', PoolAction('bind'))
      '') cfg.localDomains}

      -- Domain-specific routing
      ${lib.concatStringsSep "\n" (lib.mapAttrsToList (domain: pool: ''
        addAction('${domain}', PoolAction('${pool}'))
      '') cfg.domainRouting)}

      -- Network-based routing rules (AFTER domain rules)
      ${lib.concatMapStringsSep "\n" (rule: ''
        addAction("${rule.subnet}", PoolAction("${rule.pool}"))  -- ${rule.description}
        ${lib.optionalString rule.dropAfter ''addAction("${rule.subnet}", DropAction())  -- stop processing''}
      '') cfg.networkRouting}

      ${cfg.extraConfig}
    '';
  };
}

name: Build and diff Nix systems

on:
  pull_request:
  push:
    branches:
      - main
    paths:
      - .github/workflows/**
      - "**.nix"
      - "flake.lock"

concurrency:
  group: ${{ github.workflow }}-${{ github.event.number || github.ref }}
  cancel-in-progress: true

jobs:
  nix-build:
    if: github.event.pull_request.draft == false
    permissions:
      pull-requests: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - system: luna
            os: ubuntu-latest
    runs-on: ${{ matrix.os }}
    steps:
      - name: Create nix mount point
        if: contains(matrix.os, 'ubuntu')
        run: sudo mkdir /nix

      - name: Maximize build space
        uses: easimon/maximize-build-space@v10
        if: contains(matrix.os, 'ubuntu')
        with:
          root-reserve-mb: 512
          swap-size-mb: 1024
          build-mount-path: "/nix"
          remove-dotnet: true
          remove-android: true
          remove-haskell: true
          remove-docker-images: true
          remove-codeql: true
          overprovision-lvm: true

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install nix
        uses: cachix/install-nix-action@v30
        with:
          extra_nix_config: |
            experimental-features = nix-command flakes
            extra-platforms = aarch64-linux

      - name: Set up Magic Nix Cache
        uses: DeterminateSystems/magic-nix-cache-action@v8

      - name: Register binfmt
        run: |
          docker run --rm --privileged multiarch/qemu-user-static --reset -p yes

      - name: Set up Cachix
        uses: cachix/cachix-action@v16
        if: ${{ !github.event.pull_request.head.repo.fork }}
        with:
          name: carpenike
          authToken: "${{ secrets.CACHIX_AUTH_TOKEN }}"

      - name: Garbage collect build dependencies
        run: nix-collect-garbage

      - name: Build previous ${{ matrix.system }} system
        run: |
          nix build \
            "github:carpenike/nix-config#ciSystems.${{ matrix.system }}" \
            -v \
            --log-format raw \
            --profile ./profile

      - name: Build new ${{ matrix.system }} system
        run: |
          set -o pipefail
          nix build \
            ".#ciSystems.${{ matrix.system }}" \
            --profile ./profile \
            --fallback \
            -v \
            --log-format raw \
             > >(tee stdout.log) 2> >(tee /tmp/nix-build-err.log >&2)

      - name: Output build failure
        if: failure()
        run: |
          drv=$(grep "For full logs, run" /tmp/nix-build-err.log | grep -oE "/nix/store/.*.drv")
          if [ -n $drv ]; then
            nix log $drv
            echo $drv
          fi
          exit 1

      - name: Diff profile
        id: diff
        run: |
          nix profile diff-closures --profile ./profile
          delimiter="$(openssl rand -hex 16)"
          echo "diff<<${delimiter}" >> "${GITHUB_OUTPUT}"
          nix profile diff-closures --profile ./profile | perl -pe 's/\e\[[0-9;]*m(?:\e\[K)?//g' >> "${GITHUB_OUTPUT}"
          echo "${delimiter}" >> "${GITHUB_OUTPUT}"

      - name: Generate Token
        uses: actions/create-github-app-token@v1
        id: app-token
        with:
          app-id: ${{ secrets.CARPENIKE_APP_ID }}
          private-key: ${{ secrets.CARPENIKE_APP_PRIVATE_KEY }}

      - name: Scan for security issues
        id: security
        run: |
          nix run nixpkgs/nixos-unstable#vulnix -- -w https://raw.githubusercontent.com/ckauhaus/nixos-vulnerability-roundup/master/whitelists/nixos-unstable.toml ./profile | tee /tmp/security.txt
          OUTPUT_SECURITY="$(cat /tmp/security.txt)"
          OUTPUT_SECURITY="${OUTPUT_SECURITY//'%'/'%25'}"
          OUTPUT_SECURITY="${OUTPUT_SECURITY//$'\n'/'%0A'}"
          OUTPUT_SECURITY="${OUTPUT_SECURITY//$'\r'/'%0D'}"
          echo "$OUTPUT_SECURITY"

          delimiter="$(openssl rand -hex 16)"
          echo "security<<${delimiter}" >> "${GITHUB_OUTPUT}"
          echo "$OUTPUT_SECURITY" >> "${GITHUB_OUTPUT}"
          echo "${delimiter}" >> "${GITHUB_OUTPUT}"

      - name: Comment report in pr
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          GITHUB_TOKEN: "${{ steps.app-token.outputs.token }}"
          header: ".#ciSystems.${{ matrix.system }}"
          message: |
            ### Report for `${{ matrix.system }}`

            <summary> Version changes </summary> <br>
            <pre> ${{ steps.diff.outputs.diff }} </pre>

            <details>
            <summary> Security vulnerability report </summary> <br>
            <pre> ${{ steps.security.outputs.security }} </pre>
            </details>

  nix-build-success:
    if: ${{ always() }}
    needs:
      - nix-build
    name: Nix Build Successful
    runs-on: ubuntu-latest
    steps:
      - if: ${{ contains(needs.*.result, 'failure') || contains(needs.*.result, 'cancelled') }}
        name: Check matrix status
        run: exit 1
